name: 🚀 Safe CI/CD Pipeline with Dynamic CORS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROD_BACKEND_URL: https://xai-community.onrender.com
  PROD_FRONTEND_URL: https://xai-community-id0m2v4f8-ktsfrank-navercoms-projects.vercel.app

jobs:
  # 🔍 백엔드 안전한 검증
  backend-safe-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 🔧 Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      
    - name: 📦 Install dependencies
      run: |
        uv python install 3.11
        uv sync --frozen
      
    - name: 🧪 Test package import
      run: |
        uv run python -c "import nadle_backend; print('✅ Backend import successful')"
      
    - name: 🔧 Run config tests
      run: |
        uv run pytest tests/unit/test_config_settings.py -v --tb=short
      
    - name: 🔐 Run password tests  
      run: |
        uv run pytest tests/unit/test_password.py -v --tb=short
      
    - name: 🔑 Run JWT tests
      run: |
        uv run pytest tests/unit/test_jwt.py -v --tb=short

  # 🔍 프런트엔드 안전한 검증
  frontend-safe-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install dependencies
      run: |
        npm ci --no-audit --no-fund
        
    - name: 🧪 Run basic type tests
      run: |
        npm run test -- tests/unit/types/index.test.ts --run --reporter=verbose
      
    - name: 🏗️ Build test
      run: |
        npm run build

  # 🚀 배포 후 검증 (main 브랜치에서만)
  deployment-verification:
    needs: [backend-safe-checks, frontend-safe-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: ⏳ Wait for auto-deployment
      run: sleep 120
      
    - name: 🔍 Check backend health
      run: |
        echo "🔍 백엔드 상태 확인 중..."
        if curl -f -m 30 $PROD_BACKEND_URL/health; then
          echo "✅ 백엔드 정상 동작 확인"
        else
          echo "⚠️ 백엔드 확인 실패 (경고만)"
        fi
        
    - name: 🌐 Detect new Vercel deployment URL
      run: |
        echo "🔍 새 Vercel 배포 URL 감지 중..."
        
        # Vercel CLI 없이 GitHub API를 통해 배포 감지 시도
        echo "📝 배포 정보 수집..."
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Commit SHA: ${{ github.sha }}"
        echo "  - Branch: ${{ github.ref_name }}"
        
        # 기존 URL로 접근성 확인
        echo "🔗 기존 프런트엔드 URL 확인: $PROD_FRONTEND_URL"
        if curl -f -m 30 -s $PROD_FRONTEND_URL > /dev/null; then
          echo "✅ 기존 URL 접근 가능"
        else
          echo "⚠️ 기존 URL 접근 불가 - 새 URL로 배포된 것으로 추정"
        fi
        
        echo "🎯 동적 CORS 시스템이 새 URL을 자동으로 감지하고 허용합니다"
        echo "   - 패턴: https://xai-community*-ktsfrank-navercoms-projects.vercel.app"
        echo "   - 백엔드 로그에서 새 URL 확인 가능"
        
    - name: 🧪 Test CORS functionality
      run: |
        echo "🔍 CORS 동작 테스트..."
        
        # 백엔드 헬스체크로 CORS 기본 동작 확인
        echo "📡 백엔드 API 호출 테스트..."
        if curl -f -m 30 -H "Origin: https://test.vercel.app" $PROD_BACKEND_URL/health; then
          echo "✅ CORS 헤더가 정상적으로 처리됨"
        else
          echo "⚠️ CORS 테스트 실패 (경고만)"
        fi

  # 📊 결과 알림
  notification:
    needs: [backend-safe-checks, frontend-safe-checks, deployment-verification]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🎉 Success notification
      if: needs.backend-safe-checks.result == 'success' && needs.frontend-safe-checks.result == 'success'
      run: |
        echo "🎉 모든 테스트 통과!"
        echo "✅ 백엔드: ${{ needs.backend-safe-checks.result }}"
        echo "✅ 프런트엔드: ${{ needs.frontend-safe-checks.result }}"
        echo "🌐 백엔드 URL: $PROD_BACKEND_URL"
        echo "🌐 프런트엔드 URL: $PROD_FRONTEND_URL"
        
    - name: ❌ Failure notification
      if: needs.backend-safe-checks.result == 'failure' || needs.frontend-safe-checks.result == 'failure'
      run: |
        echo "❌ 일부 테스트 실패"
        echo "🔧 백엔드: ${{ needs.backend-safe-checks.result }}"
        echo "🔧 프런트엔드: ${{ needs.frontend-safe-checks.result }}"
        echo "📝 실패한 단계를 확인하고 수정이 필요합니다"
name: 🚀 Safe CI/CD Pipeline with Dynamic CORS

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  PROD_BACKEND_URL: https://xai-community-backend-798170408536.asia-northeast3.run.app
  PROD_FRONTEND_URL: https://xai-community.vercel.app
  # 스테이징 환경 URL (시뮬레이션용)
  STAGING_BACKEND_URL: https://xai-community-backend-staging-798170408536.asia-northeast3.run.app
  STAGING_FRONTEND_URL: https://xai-community-git-staging-ktsfrank-navercoms-projects.vercel.app

jobs:
  # 🔍 백엔드 안전한 검증
  backend-safe-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 🔧 Install uv (GitHub Actions 최적화)
      run: |
        # GitHub Actions에서 더 안정적인 UV 설치 방법
        pip install --upgrade pip
        pip install uv
        
    - name: 🐍 Initialize Python with uv
      run: |
        uv python install 3.11
        uv python pin 3.11
        
    - name: 📦 Install dependencies with uv
      run: |
        # 프로젝트와 동일한 UV 환경 구성
        uv sync --frozen
        
    - name: 🧪 Test package import
      run: |
        uv run python -c "import sys; print(f'Python: {sys.version}')"
        uv run python -c "import nadle_backend; print('✅ Backend import successful')"
      
    - name: 🔧 Run config tests
      run: |
        uv run pytest tests/unit/test_config_settings.py -v --tb=short
      
    - name: 🔐 Run password tests
      run: |
        uv run pytest tests/unit/test_password.py -v --tb=short
      
    - name: 🔑 Run JWT tests
      run: |
        uv run pytest tests/unit/test_jwt.py -v --tb=short

  # 🔍 프런트엔드 안전한 검증
  frontend-safe-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: 🧹 Clean install dependencies
      run: |
        # node_modules와 package-lock.json 완전 정리
        rm -rf node_modules package-lock.json
        # 클린 설치
        npm install --no-audit --no-fund
        
    - name: 🧪 Run basic type tests
      run: |
        npm run test -- tests/unit/types/index.test.ts --run --reporter=verbose
      
    - name: 🏗️ Build test
      run: |
        npm run build

  # 🎯 스테이징 배포 (staging 브랜치에서만)
  staging-deployment:
    needs: [backend-safe-checks, frontend-safe-checks]
    runs-on: ubuntu-latest
    environment: preview
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔑 Setup Google Cloud Authentication
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: 🔧 Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: xai-community
        
    - name: 🚀 스테이징 배포 실행
      env:
        # 공통 환경변수 (Repository Secrets)
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        USERS_COLLECTION: ${{ secrets.USERS_COLLECTION }}
        POSTS_COLLECTION: ${{ secrets.POSTS_COLLECTION }}
        COMMENTS_COLLECTION: ${{ secrets.COMMENTS_COLLECTION }}
        POST_STATS_COLLECTION: ${{ secrets.POST_STATS_COLLECTION }}
        USER_REACTIONS_COLLECTION: ${{ secrets.USER_REACTIONS_COLLECTION }}
        FILES_COLLECTION: ${{ secrets.FILES_COLLECTION }}
        STATS_COLLECTION: ${{ secrets.STATS_COLLECTION }}
        API_TITLE: "Xai Community API - Staging"
        API_VERSION: ${{ secrets.API_VERSION }}
        API_DESCRIPTION: "API for Xai Community - Staging Environment"
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ALGORITHM: ${{ secrets.ALGORITHM }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        REFRESH_TOKEN_EXPIRE_DAYS: ${{ secrets.REFRESH_TOKEN_EXPIRE_DAYS }}
        PORT: ${{ secrets.PORT }}
        HOST: ${{ secrets.HOST }}
        MAX_COMMENT_DEPTH: ${{ secrets.MAX_COMMENT_DEPTH }}
        ENABLE_CORS: ${{ secrets.ENABLE_CORS }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
        # 스테이징 환경별 고유값 (Preview Environment Secrets)
        ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
        LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
        ENABLE_DOCS: ${{ secrets.ENABLE_DOCS }}
        # Sentry Configuration (공통 DSN, 환경별 태그)
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        SENTRY_ENVIRONMENT: staging
        SENTRY_TRACES_SAMPLE_RATE: 0.1
        SENTRY_SEND_DEFAULT_PII: false
        # Redis Configuration (스테이징)
        UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
        UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        # Email Configuration (Preview Environment Secrets)
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        SMTP_USE_TLS: ${{ secrets.SMTP_USE_TLS }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        FROM_NAME: ${{ secrets.FROM_NAME }}
        EMAIL_VERIFICATION_EXPIRE_MINUTES: ${{ secrets.EMAIL_VERIFICATION_EXPIRE_MINUTES }}
        EMAIL_VERIFICATION_CODE_LENGTH: ${{ secrets.EMAIL_VERIFICATION_CODE_LENGTH }}
        EMAIL_VERIFICATION_MAX_ATTEMPTS: ${{ secrets.EMAIL_VERIFICATION_MAX_ATTEMPTS }}
        # Cache Configuration (Preview Environment Secrets)
        CACHE_ENABLED: ${{ secrets.CACHE_ENABLED }}
        CACHE_TTL_USER: ${{ secrets.CACHE_TTL_USER }}
        GCP_SERVICE_NAME: xai-community-backend-staging
      run: |
        echo "🎯 스테이징 배포 시작"
        echo "📂 Branch: ${{ github.ref }}"
        echo "🔨 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo "⏰ 시작 시간: $(date)"
        echo ""
        
        # 환경 정보 출력
        echo "🔧 환경 정보:"
        echo "  - GCP Project: $GCP_PROJECT_ID"
        echo "  - GCP Region: $GCP_REGION"
        echo "  - Service Name: $GCP_SERVICE_NAME"
        echo "  - Environment: $ENVIRONMENT"
        echo ""
        
        # gcloud 버전 확인
        echo "📋 gcloud 버전 정보:"
        gcloud version
        echo ""
        
        # 인증 상태 확인
        echo "🔑 인증 상태 확인:"
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        echo ""
        
        # 프로젝트 설정 확인
        echo "📁 현재 프로젝트 설정:"
        gcloud config get-value project
        echo ""
        
        # 배포 스크립트 실행 (상세 로그 출력)
        echo "🚀 배포 스크립트 실행 시작: $(date)"
        echo "📋 파일 존재 확인:"
        ls -la scripts/deployment/backend/deploy-staging.sh
        echo "📋 스크립트 권한 확인:"
        ls -la scripts/deployment/backend/deploy-staging.sh | awk '{print $1}'
        
        # backend 디렉토리로 이동하여 스크립트 실행
        cd backend
        chmod +x ../scripts/deployment/backend/deploy-staging.sh
        ../scripts/deployment/backend/deploy-staging.sh
        DEPLOY_EXIT_CODE=$?
        
        echo "✅ 배포 스크립트 실행 완료: $(date)"
        echo "📊 배포 결과: Exit Code $DEPLOY_EXIT_CODE"
        
        if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
          echo "❌ 배포 실패 감지"
          exit $DEPLOY_EXIT_CODE
        fi
        
    - name: 🔍 스테이징 환경 검증
      run: |
        echo "🔍 스테이징 환경 검증 시작"
        echo "⏳ 배포 안정화 대기..."
        sleep 10
        
        # 서비스 URL 가져오기
        STAGING_URL=$(gcloud run services describe xai-community-backend-staging --region=asia-northeast3 --format="value(status.url)")
        echo "🌐 스테이징 서비스 URL: $STAGING_URL"
        
        # 헬스체크
        echo "🔍 백엔드 헬스체크..."
        if curl -f -m 30 "$STAGING_URL/health"; then
          echo "✅ 헬스체크 성공"
        else
          echo "❌ 헬스체크 실패"
          exit 1
        fi
        
        # 기본 API 테스트
        echo "🔍 기본 API 테스트..."
        if curl -f -m 30 "$STAGING_URL/"; then
          echo "✅ 기본 API 테스트 성공"
        else
          echo "❌ 기본 API 테스트 실패"
          exit 1
        fi
        
        echo "🎉 스테이징 환경 검증 완료!"

  # 🌐 프론트엔드 스테이징 배포 및 Git URL 연결
  frontend-staging-deployment:
    needs: [frontend-safe-checks]
    runs-on: ubuntu-latest
    environment: preview
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: 🔧 Install Vercel CLI
      run: npm install -g vercel
      
    - name: 🔑 Configure Vercel Authentication
      run: |
        echo "Vercel CLI will use token from environment variable"
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        
    - name: 🌐 Deploy Frontend to Vercel (Staging)
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        echo "🚀 프론트엔드 스테이징 배포 시작"
        
        # frontend 디렉터리로 이동
        cd frontend
        
        # Vercel 프로젝트 연결
        vercel link --yes --token=$VERCEL_TOKEN
        
        # Staging 환경으로 배포
        DEPLOYMENT_URL=$(vercel deploy --token=$VERCEL_TOKEN --env NODE_ENV=staging)
        echo "📦 새로운 배포 URL: $DEPLOYMENT_URL"
        
        # Git 스테이징 URL에 alias 설정
        echo "🔗 Git 스테이징 URL에 alias 설정 중..."
        vercel alias $DEPLOYMENT_URL xai-community-git-staging-ktsfrank-navercoms-projects.vercel.app --token=$VERCEL_TOKEN
        
        echo "✅ Git 스테이징 URL 연결 완료!"
        echo "🌐 https://xai-community-git-staging-ktsfrank-navercoms-projects.vercel.app"
        
    - name: 🔍 프론트엔드 배포 검증
      run: |
        echo "🔍 프론트엔드 배포 검증 시작"
        echo "⏳ 배포 안정화 대기..."
        sleep 10
        
        # Git 스테이징 URL 테스트
        STAGING_FRONTEND_URL="https://xai-community-git-staging-ktsfrank-navercoms-projects.vercel.app"
        echo "🌐 스테이징 프론트엔드 URL: $STAGING_FRONTEND_URL"
        
        # 헬스체크
        echo "🔍 프론트엔드 헬스체크..."
        if curl -f -m 30 "$STAGING_FRONTEND_URL"; then
          echo "✅ 프론트엔드 헬스체크 성공"
        else
          echo "❌ 프론트엔드 헬스체크 실패"
          exit 1
        fi
        
        echo "🎉 프론트엔드 배포 검증 완료!"

  # 🚀 프로덕션 배포 (main 브랜치에서만)
  production-deployment:
    needs: [backend-safe-checks, frontend-safe-checks]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔑 Setup Google Cloud Authentication
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: 🔧 Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: xai-community
        
    - name: 🚀 프로덕션 배포 실행
      env:
        # 공통 환경변수 (Repository Secrets)
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        USERS_COLLECTION: ${{ secrets.USERS_COLLECTION }}
        POSTS_COLLECTION: ${{ secrets.POSTS_COLLECTION }}
        COMMENTS_COLLECTION: ${{ secrets.COMMENTS_COLLECTION }}
        POST_STATS_COLLECTION: ${{ secrets.POST_STATS_COLLECTION }}
        USER_REACTIONS_COLLECTION: ${{ secrets.USER_REACTIONS_COLLECTION }}
        FILES_COLLECTION: ${{ secrets.FILES_COLLECTION }}
        STATS_COLLECTION: ${{ secrets.STATS_COLLECTION }}
        API_TITLE: "Xai Community API - Production"
        API_VERSION: ${{ secrets.API_VERSION }}
        API_DESCRIPTION: "API for Xai Community - Production Environment"
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ALGORITHM: ${{ secrets.ALGORITHM }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        REFRESH_TOKEN_EXPIRE_DAYS: ${{ secrets.REFRESH_TOKEN_EXPIRE_DAYS }}
        PORT: ${{ secrets.PORT }}
        HOST: ${{ secrets.HOST }}
        MAX_COMMENT_DEPTH: ${{ secrets.MAX_COMMENT_DEPTH }}
        ENABLE_CORS: ${{ secrets.ENABLE_CORS }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
        # 프로덕션 환경별 고유값 (Production Environment Secrets)
        ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
        LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
        ENABLE_DOCS: ${{ secrets.ENABLE_DOCS }}
        # Sentry Configuration (공통 DSN, 환경별 태그)
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        SENTRY_ENVIRONMENT: production
        SENTRY_TRACES_SAMPLE_RATE: 0.1
        SENTRY_SEND_DEFAULT_PII: false
        # Redis Configuration (프로덕션)
        UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
        UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        GCP_SERVICE_NAME: xai-community-backend
      run: |
        echo "🎯 프로덕션 배포 시작"
        echo "📂 Branch: ${{ github.ref }}"
        echo "🔨 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo ""
        
        # 환경 정보 출력
        echo "🔧 환경 정보:"
        echo "  - GCP Project: $GCP_PROJECT_ID"
        echo "  - GCP Region: $GCP_REGION"
        echo "  - Service Name: $GCP_SERVICE_NAME"
        echo "  - Environment: $ENVIRONMENT"
        echo ""
        
        # 프로덕션 배포 스크립트 실행 (backend 디렉토리에서)
        cd backend
        chmod +x ../scripts/deployment/backend/deploy-production.sh
        ../scripts/deployment/backend/deploy-production.sh
        
    - name: 🔍 프로덕션 환경 검증
      run: |
        echo "🔍 프로덕션 환경 검증 시작"
        echo "⏳ 배포 안정화 대기..."
        sleep 10
        
        # 서비스 URL 가져오기
        PRODUCTION_URL=$(gcloud run services describe xai-community-backend --region=asia-northeast3 --format="value(status.url)")
        echo "🌐 프로덕션 서비스 URL: $PRODUCTION_URL"
        
        # 헬스체크
        echo "🔍 백엔드 헬스체크..."
        if curl -f -m 30 "$PRODUCTION_URL/health"; then
          echo "✅ 헬스체크 성공"
        else
          echo "❌ 헬스체크 실패"
          exit 1
        fi
        
        # 기본 API 테스트
        echo "🔍 기본 API 테스트..."
        if curl -f -m 30 "$PRODUCTION_URL/"; then
          echo "✅ 기본 API 테스트 성공"
        else
          echo "❌ 기본 API 테스트 실패"
          exit 1
        fi
        
    - name: 🌐 Verify Production Frontend URL
      run: |
        echo "🔍 Production 프런트엔드 URL 검증 중..."
        echo "🎯 Primary Production Domain: $PROD_FRONTEND_URL"
        
        # Production Domain 접근성 확인
        echo "🔗 Production Domain 확인: $PROD_FRONTEND_URL"
        if curl -f -m 30 -s $PROD_FRONTEND_URL > /dev/null; then
          echo "✅ Production Domain 접근 가능"
          echo "🎉 고정 Production Domain이 정상 작동 중"
        else
          echo "⚠️ Production Domain 접근 불가"
          echo "📝 Preview 배포가 사용 중일 수 있음"
        fi
        
        echo ""
        echo "📋 CORS 설정 정보:"
        echo "  🎯 Primary: $PROD_FRONTEND_URL"
        echo "  🔄 Fallback: 동적 패턴 매칭 활성화"
        echo "  📡 패턴: https://xai-community*.vercel.app"
        echo "  🔍 백엔드 로그에서 실시간 URL 감지 확인 가능"
        
    - name: 🧪 Test CORS functionality
      run: |
        echo "🔍 CORS 동작 테스트..."
        
        # Production Domain으로 CORS 테스트
        echo "📡 Production Domain CORS 테스트..."
        if curl -f -m 30 -H "Origin: $PROD_FRONTEND_URL" $PROD_BACKEND_URL/health; then
          echo "✅ Production Domain CORS 정상 작동"
        else
          echo "⚠️ Production Domain CORS 테스트 실패"
        fi
        
        # Preview URL 패턴으로도 테스트
        echo "📡 Preview URL 패턴 CORS 테스트..."
        TEST_PREVIEW_URL="https://xai-community-test-ktsfrank-navercoms-projects.vercel.app"
        if curl -f -m 30 -H "Origin: $TEST_PREVIEW_URL" $PROD_BACKEND_URL/health; then
          echo "✅ Preview URL 패턴 CORS 정상 작동"
        else
          echo "⚠️ Preview URL 패턴 CORS 테스트 실패 (정상 - 실제 URL이 아님)"
        fi

  # 📊 결과 알림
  notification:
    needs: [backend-safe-checks, frontend-safe-checks, production-deployment, staging-deployment, frontend-staging-deployment]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🎉 Success notification
      if: needs.backend-safe-checks.result == 'success' && needs.frontend-safe-checks.result == 'success'
      run: |
        echo "🎉 모든 테스트 통과!"
        echo "✅ 백엔드: ${{ needs.backend-safe-checks.result }}"
        echo "✅ 프런트엔드: ${{ needs.frontend-safe-checks.result }}"
        
        # 스테이징 결과 표시 (staging 브랜치에서만)
        if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
          echo "🎯 스테이징 백엔드 배포: ${{ needs.staging-deployment.result }}"
          echo "🎯 스테이징 프론트엔드 배포: ${{ needs.frontend-staging-deployment.result }}"
          echo "🌐 스테이징 백엔드: $STAGING_BACKEND_URL"
          echo "🌐 스테이징 프런트엔드: https://xai-community-git-staging-ktsfrank-navercoms-projects.vercel.app"
        fi
        
        # 프로덕션 결과 표시 (main 브랜치에서만)
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "🚀 프로덕션 배포: ${{ needs.production-deployment.result }}"
          echo "🌐 프로덕션 백엔드: $PROD_BACKEND_URL"
          echo "🌐 프로덕션 프런트엔드: $PROD_FRONTEND_URL"
        fi
        
    - name: ❌ Failure notification
      if: needs.backend-safe-checks.result == 'failure' || needs.frontend-safe-checks.result == 'failure' || needs.production-deployment.result == 'failure' || needs.staging-deployment.result == 'failure' || needs.frontend-staging-deployment.result == 'failure'
      run: |
        echo "❌ 일부 테스트 또는 배포 실패"
        echo "🔧 백엔드: ${{ needs.backend-safe-checks.result }}"
        echo "🔧 프런트엔드: ${{ needs.frontend-safe-checks.result }}"
        
        # 스테이징 실패 확인
        if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
          echo "🎯 스테이징 백엔드 배포: ${{ needs.staging-deployment.result }}"
          echo "🎯 스테이징 프론트엔드 배포: ${{ needs.frontend-staging-deployment.result }}"
        fi
        
        # 프로덕션 실패 확인
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "🚀 프로덕션 배포: ${{ needs.production-deployment.result }}"
        fi
        
        echo "📝 실패한 단계를 확인하고 수정이 필요합니다"

  # 🔄 자동 롤백 (배포 실패 시)
  auto-rollback:
    needs: [backend-safe-checks, frontend-safe-checks, production-deployment, staging-deployment, frontend-staging-deployment]
    runs-on: ubuntu-latest
    if: failure() && (needs.production-deployment.result == 'failure' || needs.staging-deployment.result == 'failure' || needs.frontend-staging-deployment.result == 'failure')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔑 Setup Google Cloud Authentication
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: 🔧 Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: xai-community
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 🔄 Install Vercel CLI
      run: npm install -g vercel
      
    - name: 🔑 Configure Vercel
      run: |
        echo "${{ secrets.VERCEL_TOKEN }}" | vercel login --stdin || echo "Vercel login failed"
      
    - name: 🔄 Execute Auto Rollback
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        echo "🚨 배포 실패 감지 - 자동 롤백 시작"
        
        # 환경 결정
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ENVIRONMENT="production"
          echo "🎯 프로덕션 환경 자동 롤백"
        elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
          ENVIRONMENT="staging"
          echo "🎯 스테이징 환경 자동 롤백"
        else
          echo "❌ 지원되지 않는 브랜치: ${{ github.ref }}"
          exit 1
        fi
        
        # 이전 성공한 커밋 해시 찾기
        PREVIOUS_COMMIT=$(git log --format="%H" --skip=1 -n 1)
        echo "📍 이전 커밋으로 롤백: $PREVIOUS_COMMIT"
        
        # 롤백 스크립트 실행 권한 부여
        chmod +x ./scripts/deployment/full-stack/rollback-full.sh
        chmod +x ./scripts/deployment/backend/rollback-backend.sh
        chmod +x ./scripts/deployment/frontend/rollback-frontend.sh
        
        # 자동 롤백 실행 (검증 건너뛰기)
        if ./scripts/deployment/full-stack/rollback-full.sh -e "$ENVIRONMENT" -s; then
          echo "✅ 자동 롤백 성공"
          
          # 롤백 검증
          chmod +x ./scripts/monitoring/verify-rollback.sh
          if ./scripts/monitoring/verify-rollback.sh -e "$ENVIRONMENT" "$PREVIOUS_COMMIT" "$PREVIOUS_COMMIT"; then
            echo "✅ 롤백 검증 성공"
          else
            echo "⚠️ 롤백 검증 실패 - 수동 확인 필요"
          fi
        else
          echo "❌ 자동 롤백 실패 - 수동 개입 필요"
          exit 1
        fi
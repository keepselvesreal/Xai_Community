name: 🚀 Safe CI/CD Pipeline with Dynamic CORS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROD_BACKEND_URL: https://xai-community.onrender.com
  PROD_FRONTEND_URL: https://xai-community.vercel.app

jobs:
  # 🔍 백엔드 안전한 검증
  backend-safe-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 🔧 Install uv (GitHub Actions 최적화)
      run: |
        # GitHub Actions에서 더 안정적인 UV 설치 방법
        pip install --upgrade pip
        pip install uv
        
    - name: 🐍 Initialize Python with uv
      run: |
        uv python install 3.11
        uv python pin 3.11
        
    - name: 📦 Install dependencies with uv
      run: |
        # 프로젝트와 동일한 UV 환경 구성
        uv sync --frozen
        
    - name: 🧪 Test package import
      run: |
        uv run python -c "import sys; print(f'Python: {sys.version}')"
        uv run python -c "import nadle_backend; print('✅ Backend import successful')"
      
    - name: 🔧 Run config tests
      run: |
        uv run pytest tests/unit/test_config_settings.py -v --tb=short
      
    - name: 🔐 Run password tests
      run: |
        uv run pytest tests/unit/test_password.py -v --tb=short
      
    - name: 🔑 Run JWT tests
      run: |
        uv run pytest tests/unit/test_jwt.py -v --tb=short

  # 🔍 프런트엔드 안전한 검증
  frontend-safe-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install dependencies
      run: |
        npm ci --no-audit --no-fund
        
    - name: 🧪 Run basic type tests
      run: |
        npm run test -- tests/unit/types/index.test.ts --run --reporter=verbose
      
    - name: 🏗️ Build test
      run: |
        npm run build

  # 🚀 배포 후 검증 (main 브랜치에서만)
  deployment-verification:
    needs: [backend-safe-checks, frontend-safe-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: ⏳ Wait for auto-deployment
      run: sleep 120
      
    - name: 🔍 Check backend health
      run: |
        echo "🔍 백엔드 상태 확인 중..."
        if curl -f -m 30 $PROD_BACKEND_URL/health; then
          echo "✅ 백엔드 정상 동작 확인"
        else
          echo "⚠️ 백엔드 확인 실패 (경고만)"
        fi
        
    - name: 🌐 Verify Production Frontend URL
      run: |
        echo "🔍 Production 프런트엔드 URL 검증 중..."
        echo "🎯 Primary Production Domain: $PROD_FRONTEND_URL"
        
        # Production Domain 접근성 확인
        echo "🔗 Production Domain 확인: $PROD_FRONTEND_URL"
        if curl -f -m 30 -s $PROD_FRONTEND_URL > /dev/null; then
          echo "✅ Production Domain 접근 가능"
          echo "🎉 고정 Production Domain이 정상 작동 중"
        else
          echo "⚠️ Production Domain 접근 불가"
          echo "📝 Preview 배포가 사용 중일 수 있음"
        fi
        
        echo ""
        echo "📋 CORS 설정 정보:"
        echo "  🎯 Primary: $PROD_FRONTEND_URL"
        echo "  🔄 Fallback: 동적 패턴 매칭 활성화"
        echo "  📡 패턴: https://xai-community*.vercel.app"
        echo "  🔍 백엔드 로그에서 실시간 URL 감지 확인 가능"
        
    - name: 🧪 Test CORS functionality
      run: |
        echo "🔍 CORS 동작 테스트..."
        
        # Production Domain으로 CORS 테스트
        echo "📡 Production Domain CORS 테스트..."
        if curl -f -m 30 -H "Origin: $PROD_FRONTEND_URL" $PROD_BACKEND_URL/health; then
          echo "✅ Production Domain CORS 정상 작동"
        else
          echo "⚠️ Production Domain CORS 테스트 실패"
        fi
        
        # Preview URL 패턴으로도 테스트
        echo "📡 Preview URL 패턴 CORS 테스트..."
        TEST_PREVIEW_URL="https://xai-community-test-ktsfrank-navercoms-projects.vercel.app"
        if curl -f -m 30 -H "Origin: $TEST_PREVIEW_URL" $PROD_BACKEND_URL/health; then
          echo "✅ Preview URL 패턴 CORS 정상 작동"
        else
          echo "⚠️ Preview URL 패턴 CORS 테스트 실패 (정상 - 실제 URL이 아님)"
        fi

  # 📊 결과 알림
  notification:
    needs: [backend-safe-checks, frontend-safe-checks, deployment-verification]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🎉 Success notification
      if: needs.backend-safe-checks.result == 'success' && needs.frontend-safe-checks.result == 'success'
      run: |
        echo "🎉 모든 테스트 통과!"
        echo "✅ 백엔드: ${{ needs.backend-safe-checks.result }}"
        echo "✅ 프런트엔드: ${{ needs.frontend-safe-checks.result }}"
        echo "🌐 백엔드 URL: $PROD_BACKEND_URL"
        echo "🌐 프런트엔드 URL: $PROD_FRONTEND_URL"
        
    - name: ❌ Failure notification
      if: needs.backend-safe-checks.result == 'failure' || needs.frontend-safe-checks.result == 'failure'
      run: |
        echo "❌ 일부 테스트 실패"
        echo "🔧 백엔드: ${{ needs.backend-safe-checks.result }}"
        echo "🔧 프런트엔드: ${{ needs.frontend-safe-checks.result }}"
        echo "📝 실패한 단계를 확인하고 수정이 필요합니다"